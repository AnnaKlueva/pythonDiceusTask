{"uid":"f77279bc20e393d2","name":"test_navigation_to_careers_page","fullName":"test.test_navigation.TestInsider#test_navigation_to_careers_page","historyId":"ced7d2d7cc4572423663948154a96d0d","time":{"start":1747894676976,"stop":1747894693535,"duration":16559},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=136.0.7103.113)\nStacktrace:\n#0 0x560a84c7e78a <unknown>\n#1 0x560a84720ef3 <unknown>\n#2 0x560a84773bbe <unknown>\n#3 0x560a84766b9d <unknown>\n#4 0x560a847983a2 <unknown>\n#5 0x560a8476651a <unknown>\n#6 0x560a8479856e <unknown>\n#7 0x560a847be2a0 <unknown>\n#8 0x560a84798173 <unknown>\n#9 0x560a84764d4b <unknown>\n#10 0x560a847659b1 <unknown>\n#11 0x560a84c4393b <unknown>\n#12 0x560a84c4783a <unknown>\n#13 0x560a84c2b692 <unknown>\n#14 0x560a84c483c4 <unknown>\n#15 0x560a84c104cf <unknown>\n#16 0x560a84c6c568 <unknown>\n#17 0x560a84c6c746 <unknown>\n#18 0x560a84c7d5f6 <unknown>\n#19 0x7fbf2dc9caa4 <unknown>\n#20 0x7fbf2dd29c3c <unknown>","statusTrace":"self = <pythonDiceusTask.test.test_navigation.TestInsider object at 0x7ffa8f1ae710>\n\n    def test_navigation_to_careers_page(self):\n        home_page = HomePage(self.driver, self.wait)\n        home_page.go_to_home_page()\n        home_page.wait_util_header_is_loaded()\n>       home_page.navigate_to_company_tab()\n\ntest/test_navigation.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/home_page.py:28: in navigate_to_company_tab\n    self.get_web_element(*self.COMPANY_TAB).click()\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa8f1afed0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#18 0x560a84c7d5f6 \\\\u003Cunknown>\\\\n#19 0x7fbf2dc9caa4 \\\\u003Cunknown>\\\\n#20 0x7fbf2dd29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=136.0.7103.113)\nE       Stacktrace:\nE       #0 0x560a84c7e78a <unknown>\nE       #1 0x560a84720ef3 <unknown>\nE       #2 0x560a84773bbe <unknown>\nE       #3 0x560a84766b9d <unknown>\nE       #4 0x560a847983a2 <unknown>\nE       #5 0x560a8476651a <unknown>\nE       #6 0x560a8479856e <unknown>\nE       #7 0x560a847be2a0 <unknown>\nE       #8 0x560a84798173 <unknown>\nE       #9 0x560a84764d4b <unknown>\nE       #10 0x560a847659b1 <unknown>\nE       #11 0x560a84c4393b <unknown>\nE       #12 0x560a84c4783a <unknown>\nE       #13 0x560a84c2b692 <unknown>\nE       #14 0x560a84c483c4 <unknown>\nE       #15 0x560a84c104cf <unknown>\nE       #16 0x560a84c6c568 <unknown>\nE       #17 0x560a84c6c746 <unknown>\nE       #18 0x560a84c7d5f6 <unknown>\nE       #19 0x7fbf2dc9caa4 <unknown>\nE       #20 0x7fbf2dd29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementNotInteractableException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"init_driver","time":{"start":1747894676643,"stop":1747894676976,"duration":333},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"driver_name","time":{"start":1747894676643,"stop":1747894676643,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=136.0.7103.113)\nStacktrace:\n#0 0x560a84c7e78a <unknown>\n#1 0x560a84720ef3 <unknown>\n#2 0x560a84773bbe <unknown>\n#3 0x560a84766b9d <unknown>\n#4 0x560a847983a2 <unknown>\n#5 0x560a8476651a <unknown>\n#6 0x560a8479856e <unknown>\n#7 0x560a847be2a0 <unknown>\n#8 0x560a84798173 <unknown>\n#9 0x560a84764d4b <unknown>\n#10 0x560a847659b1 <unknown>\n#11 0x560a84c4393b <unknown>\n#12 0x560a84c4783a <unknown>\n#13 0x560a84c2b692 <unknown>\n#14 0x560a84c483c4 <unknown>\n#15 0x560a84c104cf <unknown>\n#16 0x560a84c6c568 <unknown>\n#17 0x560a84c6c746 <unknown>\n#18 0x560a84c7d5f6 <unknown>\n#19 0x7fbf2dc9caa4 <unknown>\n#20 0x7fbf2dd29c3c <unknown>","statusTrace":"self = <pythonDiceusTask.test.test_navigation.TestInsider object at 0x7ffa8f1ae710>\n\n    def test_navigation_to_careers_page(self):\n        home_page = HomePage(self.driver, self.wait)\n        home_page.go_to_home_page()\n        home_page.wait_util_header_is_loaded()\n>       home_page.navigate_to_company_tab()\n\ntest/test_navigation.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/home_page.py:28: in navigate_to_company_tab\n    self.get_web_element(*self.COMPANY_TAB).click()\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:448: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7ffa8f1afed0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#18 0x560a84c7d5f6 \\\\u003Cunknown>\\\\n#19 0x7fbf2dc9caa4 \\\\u003Cunknown>\\\\n#20 0x7fbf2dd29c3c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=136.0.7103.113)\nE       Stacktrace:\nE       #0 0x560a84c7e78a <unknown>\nE       #1 0x560a84720ef3 <unknown>\nE       #2 0x560a84773bbe <unknown>\nE       #3 0x560a84766b9d <unknown>\nE       #4 0x560a847983a2 <unknown>\nE       #5 0x560a8476651a <unknown>\nE       #6 0x560a8479856e <unknown>\nE       #7 0x560a847be2a0 <unknown>\nE       #8 0x560a84798173 <unknown>\nE       #9 0x560a84764d4b <unknown>\nE       #10 0x560a847659b1 <unknown>\nE       #11 0x560a84c4393b <unknown>\nE       #12 0x560a84c4783a <unknown>\nE       #13 0x560a84c2b692 <unknown>\nE       #14 0x560a84c483c4 <unknown>\nE       #15 0x560a84c104cf <unknown>\nE       #16 0x560a84c6c568 <unknown>\nE       #17 0x560a84c6c746 <unknown>\nE       #18 0x560a84c7d5f6 <unknown>\nE       #19 0x7fbf2dc9caa4 <unknown>\nE       #20 0x7fbf2dd29c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementNotInteractableException","steps":[{"name":"Open URL: 'https://useinsider.com/'","time":{"start":1747894676977,"stop":1747894679379,"duration":2402},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"url","value":"'https://useinsider.com/'"}],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Navigate to 'Company' tab","time":{"start":1747894693499,"stop":1747894693533,"duration":34},"status":"broken","statusMessage":"selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=136.0.7103.113)\nStacktrace:\n#0 0x560a84c7e78a <unknown>\n#1 0x560a84720ef3 <unknown>\n#2 0x560a84773bbe <unknown>\n#3 0x560a84766b9d <unknown>\n#4 0x560a847983a2 <unknown>\n#5 0x560a8476651a <unknown>\n#6 0x560a8479856e <unknown>\n#7 0x560a847be2a0 <unknown>\n#8 0x560a84798173 <unknown>\n#9 0x560a84764d4b <unknown>\n#10 0x560a847659b1 <unknown>\n#11 0x560a84c4393b <unknown>\n#12 0x560a84c4783a <unknown>\n#13 0x560a84c2b692 <unknown>\n#14 0x560a84c483c4 <unknown>\n#15 0x560a84c104cf <unknown>\n#16 0x560a84c6c568 <unknown>\n#17 0x560a84c6c746 <unknown>\n#18 0x560a84c7d5f6 <unknown>\n#19 0x7fbf2dc9caa4 <unknown>\n#20 0x7fbf2dd29c3c <unknown>\n\n","statusTrace":"  File \"/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/allure_commons/_allure.py\", line 202, in impl\n    return func(*a, **kw)\n  File \"/home/runner/work/pythonDiceusTask/pythonDiceusTask/pages/home_page.py\", line 28, in navigate_to_company_tab\n    self.get_web_element(*self.COMPANY_TAB).click()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py\", line 119, in click\n    self._execute(Command.CLICK_ELEMENT)\n    ~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py\", line 572, in _execute\n    return self._parent.execute(command, params)\n           ~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py\", line 448, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"/opt/hostedtoolcache/Python/3.13.3/x64/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py\", line 232, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[{"uid":"4a0e9c1d83599b0b","name":"screenshot","source":"4a0e9c1d83599b0b.png","type":"image/png","size":68043},{"uid":"7ac2a62d2b134493","name":"log","source":"7ac2a62d2b134493.txt","type":"text/plain","size":53}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":2,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"init_driver::0","time":{"start":1747894693637,"stop":1747894693746,"duration":109},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"test"},{"name":"suite","value":"test_navigation"},{"name":"subSuite","value":"TestInsider"},{"name":"host","value":"fv-az1618-446"},{"name":"thread","value":"3911-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test.test_navigation"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"f77279bc20e393d2.json","parameterValues":[]}